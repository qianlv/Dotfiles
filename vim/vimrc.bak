" Initialize:
" 1. Windows(nvim):
"   md ~\AppData\Local\nvim\autoload
"   $uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
"   (New-Object Net.WebClient).DownloadFile(
"     $uri,
"     $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(
"       "~\AppData\Local\nvim\autoload\plug.vim"
"     )
"   )
" 2. Linux:
"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" neovim 配置目录:  ~/.config/nvim/

filetype off                  " required

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
" Plug 'uarun/vim-protobuf'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-surround'
Plug 'honza/vim-snippets'
Plug 'mbbill/undotree'
Plug 'kshenoy/vim-signature'
Plug 'terryma/vim-expand-region'
Plug 'Yggdroot/indentLine'
Plug 'frazrepo/vim-rainbow'
Plug 'liuchengxu/vista.vim'
" Plug 'liuchengxu/vim-which-key'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" coc extensions
" https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions
" CocInstall coc-tabnine coc-snippets coc-lists coc-ecdict coc-calc coc-sh
" coc-rust-analyzer coc-pyright coc-json coc-pairs coc-clangd coc-word coc-marketplace
"
" C++ Project
" cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1
" or
" https://github.com/nickdiego/compiledb
" pip install compiledb
" compiledb make
" or
" bear, https://github.com/rizsotto/Bear

" Themes
" Plug 'flazz/vim-colorschemes'
" Plug 'rakr/vim-one'
" Plug 'lifepillar/vim-solarized8'
Plug 'morhetz/gruvbox'
" https://github.com/overcache/NeoSolarized
" Plug 'overcache/NeoSolarized'

Plug 'justinmk/vim-sneak'
if has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
endif


" " Initialize plugin system
call plug#end()

filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ignore white space in vimdiff
" set diffopt+=iwhite
" set diffexpr=""

" Get out of VI's compatible mode..
set nocompatible
" 区分大小写
set infercase
set linebreak
" 将tab键和多余的空格显示出来
" set listchars=trail:.
" Sets how many lines of history VIM has to remember
set history=1000
"Enable filetype plugin
filetype plugin on
filetype indent on
" switch syntax highlighting on
syntax on
syntax enable
" set color
set t_Co=256
set background=dark " or light if you prefer the light version
if (has("termguicolors"))
    set termguicolors
endif
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

"set color themes
" colorscheme one 
" colorscheme solarized8
colorscheme gruvbox
" colorscheme molokai 
" colorscheme desert

hi Normal ctermbg=none guibg=none

" Set to auto read when a file is changed from the outside
set autoread
" save when changing buffer
set autowrite

" forbiden mouse
" set mouse=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Interface & Display
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set scroll offset
set scrolloff=5
" Turn on wild menu
set wildmenu
set wildmode=longest:full
" Show the line and column number of the cursor position, separated by a comma
set ruler
" change buffer without saving
set hid
" set backspace
set backspace=indent,eol,start
" Ignore case in search patterns.
set ignorecase
set smartcase
" When there is a previous search pattern, highlight all its matches.
set hlsearch
" While typing a search command, show where the pattern, as it was typed so far, matches.
set incsearch
" Set magic on, for regular expressions
set magic
" When a bracket is inserted, briefly jump to the matching one
set showmatch
set matchtime=2
" no sound on errors
set noerrorbells
set novisualbell
" The value of this option influences when the last window will have a status line
set laststatus=2    " always show the statue line
" line number
set number
set relativenumber

" set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set synmaxcol=200          " Only highlight the first 200 columns.

" set virtualedit=all


" 高亮显示匹配的尖括号
set mps+=<:>
set mps+={:}
set mps+=$:$

" 按esc自动去除高亮
nnoremap <esc> :nohl<cr>
" <leader> 键映射修改
let mapleader="\<Space>"
" chang to normal
tnoremap <silent> <Esc> <C-\><C-n>
""""""""""""""""""""""""""""""
" Indent
""""""""""""""""""""""""""""""
" set shiftwidth=2
" set tabstop=2
" set softtabstop=2
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab   "Use the appropriate number of spaces to insert a <Tab>.
set smarttab    "set smarttab, at the start of line use shiftwide and others tabstop
" Auto indent
set autoindent
" Smart indent
set smartindent
" show a visual line under the cursor's current line 
" set cursorline

" set clipboard^=unnamed
" https://github.com/neovim/neovim/wiki/FAQ#how-to-use-the-windows-clipboard-from-wsl
set clipboard+=unnamedplus

if system('uname -r') =~ "microsoft"
if has('nvim')
    let s:win32yank = '/usr/local/bin/win32yank.exe'
    let g:clipboard = {
          \  'name' : 'wsl',
          \  'copy' : {
          \    '+' : s:win32yank..' -i --crlf',
          \    '*' : s:win32yank..' -i --crlf',
          \  },
          \  'paste' : {
          \    '+' : s:win32yank..' -o --lf',
          \    '*' : s:win32yank..' -o --lf',
          \  },
          \}
    unlet s:win32yank
endif
endif

" Encoding
""""""""""""""""""""""""""""""
scriptencoding=utf-8 " :w ++enc=utf-8 to solve conversion error
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,cp936,latin1
set termencoding=utf-8

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map shortcut
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent><nowait> <C-l> gt
nnoremap <silent><nowait> <C-h> gT

cmap w!! w !sudo tee %
cmap w8 w ++enc=utf-8

" 开启或关闭 paste 模式
"nmap <leader>p :setlocal paste! paste?<cr>
set pastetoggle=<F2>

" terminal size
if has('nvim')
  set guicursor=
  nnoremap <silent><nowait> <space>t :<C-u>sp \| resize 7 \| term<CR>i
  nnoremap <silent><nowait> <space>tt :tabnew +term<CR>i
else
  " set ttyfast                " Faster redrawing.
  nnoremap <silent><nowait> <space>t :<C-u> sp \| resize 7 \| term ++curwin<CR>
  nnoremap <silent><nowait> <space>tt :<C-u>tabnew \| term ++curwin<CR>
endif

" * 搜索不调整到下一个
nnoremap * *``
nnoremap * :keepjumps normal! mi*`i<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" for coc
""""""""""""""""""""""""""""""
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=1

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <C-n>
	  \ pumvisible() ? "\<C-n>" :
	  \ <SID>check_back_space() ? "\<TAB>" :
	  \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gs :sp<CR><Plug>(coc-definition)
nmap <silent> gv :vsp<CR><Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>ar  <Plug>(coc-codeaction-selected)
nmap <leader>ar  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Header/File switch
command! -nargs=0 SH   :call     CocAction('runCommand', 'clangd.switchSourceHeader')
nnoremap <silent><nowait> <C-p> :SH<CR>i
inoremap <silent><nowait> <C-p> <Esc>:SH<CR>i

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <leader>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <leader>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <leader>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <leader>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>
" Buffer List
nnoremap <silent><nowait> <leader>ls  :<C-u>CocList buffers<cr>
" Do default action for next item.
" nnoremap <silent><nowait> <leader>j  :<C-u>CocNext<CR>
" Do default action for previous item.
" nnoremap <silent><nowait> <leader>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <leader>re  :<C-u>CocListResume<CR>
" Search files
nnoremap <silent><nowait> <leader>cp  :<C-u>CocList files<CR>
" Restar Coc
nnoremap <silent><nowait> <leader>rs  :<C-u>CocRestart<CR>
" Open CocConfig
nnoremap <silent><nowait> <leader>cf  :<C-u>CocConfig<CR>
" header/file switch

" enable/disable coc integration
let g:airline#extensions#coc#enabled = 1

" install ripgrep
" grep word under cursor
command! -nargs=+ -complete=custom,s:GrepArgs Rg exe 'CocList grep '.<q-args>

function! s:GrepArgs(...)
  let list = ['-S', '-smartcase', '-i', '-ignorecase', '-w', '-word',
        \ '-e', '-regex', '-u', '-skip-vcs-ignores', '-t', '-extension']
  return join(list, "\n")
endfunction

" Keymapping for grep word under cursor with interactive mode
nnoremap <silent> <Leader>gr :exe 'CocList -I --input='.expand('<cword>').' grep'<CR>

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
" let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_next = '<Tab>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
" let g:coc_snippet_prev = '<c-k>'

" for tabular 
nmap <Leader>b& :Tabularize /&<CR>
xmap <Leader>b& :Tabularize /&<CR>
nmap <Leader>b= :Tabularize /=<CR>
xmap <Leader>b= :Tabularize /=<CR>
nmap <Leader>b: :Tabularize /:<CR>
xmap <Leader>b: :Tabularize /:<CR>
nmap <Leader>b:: :Tabularize /:\zs<CR>
xmap <Leader>b:: :Tabularize /:\zs<CR>
nmap <Leader>b, :Tabularize /,<CR>
xmap <Leader>b, :Tabularize /,<CR>
nmap <Leader>b,, :Tabularize /,\zs<CR>
xmap <Leader>b,, :Tabularize /,\zs<CR>
nmap <Leader>b<Bar> :Tabularize /<Bar><CR>
xmap <Leader>b<Bar> :Tabularize /<Bar><CR>

""""""""""""""""""""""""""""""
" nerdcommenter
""""""""""""""""""""""""""""""
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code IndentationError
let g:NERDDefaultAlign = 'left'
nmap <silent><nowait> <C-m>   <plug>NERDCommenterToggle
xmap <silent><nowait> <C-m>   <plug>NERDCommenterToggle

""""""""""""""""""""""""""""""
" undotree
""""""""""""""""""""""""""""""
let g:move_key_modifier = 'C'

nnoremap <Leader>u :UndotreeToggle<cr>
if has("persistent_undo")
	set undodir=~/.undodir/
	set undofile
endif

""""""""""""""""""""""""""""""
" IndentLine
""""""""""""""""""""""""""""""
let g:indentLine_char = "┆"
let g:indentLine_enabled = 1
let g:autopep8_disable_show_diff=1

""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""
let NERDChristmasTree = 1
let NERDTreeWinPos = "left"
nmap <leader>tr :NERDTree<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-rainbow
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:rainbow_active = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified'] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction',
      \ },
      \ }
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vista
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
" Set the executive for some filetypes explicitly. Use the explicit executive
" instead of the default one for these filetypes when using `:Vista` without
" specifying the executive.
let g:vista_executive_for = {
  \ 'cpp': 'coc',
  \ 'c': 'coc',
  \ 'py': 'coc'
  \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AutoCmd
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
	"auto read vimrc when it refreshed
    autocmd! bufwritepost ~/.vim/vimrc source ~/.vim/vimrc

	"自动回到上次打开的位置
	autocmd! BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

    au BufReadPost *.rkt,*.rktl set filetype=scheme

    " indentLine 
    autocmd FileType json,markdown let g:indentLine_conceallevel = 0

    " make vim json to jsonc type
    " for 'Comments are not permitted in JSON' problem
    au BufRead,BufNewFile *.json set filetype=jsonc

endif " has(autocmd)

" https://www.reddit.com/r/vim/comments/2362q1/let_mapleader_now_how_do_i_get_rid_of_that_delay/
augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
    " au VimEnter * iunmap <Leader>is
    " au VimEnter * iunmap <Leader>i
    " au VimEnter * iunmap <Leader>ihn
augroup END

if has('nvim')
    lua <<EOF
    require'nvim-treesitter.configs'.setup {
        highlight = {
        enable = true,
        custom_captures = {
            -- Highlight the @foo.bar capture group with the "Identifier" highlight group.
            ["foo.bar"] = "Identifier",
            },
        -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
        -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
        -- Using this option may slow down your editor, and you may see some duplicate highlights.
        -- Instead of true it can also be a list of languages
        additional_vim_regex_highlighting = false,
        },
        indent = { enable = true },
    }
EOF
endif
