{
    // coc settings
    // "diagnostic.enableMessage": "never",
    "diagnostic.virtualText": true,
    "diagnostic.virtualTextCurrentLineOnly": true,
    // https://github.com/neoclide/coc.nvim/blob/release/doc/coc.txt
    "suggest.labelMaxLength": 50,
    "suggest.minTriggerInputLength": 3,
    "suggest.noselect": false,
    "semanticTokens.enable": true,
    // auto format
    "coc.preferences.formatOnSave": true,
    "[c][cpp][java]": {
        "coc.preferences.formatOnSave": false,
    },
    "coc.preferences.extensionUpdateCheck": "daily",
    "coc.preferences.currentFunctionSymbolAutoUpdate": true,
    // https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions
    // c++, c
    "clangd.enabled": true,
    "clangd.arguments": [
        "--background-index",
        "--clang-tidy",
        "--completion-style=bundled",
        "--header-insertion=iwyu",
        "--pch-storage=memory",
        "--suggest-missing-includes",
        "--enable-config",
        "--function-arg-placeholders",
        "--cross-file-rename",
        "--fallback-style=Webkit",
        "-j=4",
    ],
    "clangd.fallbackFlags": [
        // "-std=gnu99"
        "-std=c++11"
    ],
    "clangd.path": "~/.config/coc/extensions/coc-clangd-data/install/16.0.2/clangd_16.0.2/bin/clangd",
    // python
    "pyright.enable": true,
    "python.sortImports.path": "isort",
    "pyright.organizeimports.provider": "isort",
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "autopep8",
    // rust
    "rust-analyzer.updates.checkOnStartup": false,
    "rust-analyzer.check.overrideCommand": [
        "cargo",
        "clippy",
        "--workspace",
        "--message-format=json",
        "--all-targets"
    ],
    // coc-lists
    "list.normalMappings": {
        "t": "action:tabe",
        "v": "action:vsplit",
        "s": "action:split",
        "d": "expr:GetDeleteAction"
    },
    "list.insertMappings": {
        "<C-t>": "action:tabe",
        "<C-w>": "command:wincmd k"
        // "<C-j>": "normal:j"
    },
    "java.project.referencedLibraries": [
        "lib/**/*.jar",
        "/usr/share/java/**/*.jar",
    ],
    // racket
    "languageserver": {
        "racket": {
            "command": "racket",
            "trace.server": "verbose",
            "args": [
                "--lib",
                "racket-langserver"
            ],
            "filetypes": [
                "scheme",
                "rkt",
                "racket",
            ]
        }
    },
    // coc-pairs
    "pairs.disableLanguages": [
        "scheme"
    ],
    // sh
    "sh.enable": true,
    // coc-diagnostic
    "diagnostic-languageserver.enable": false,
    // "diagnostic.enable": false,
    "diagnostic-languageserver.filetypes": {
        // lint `sh` (includes `bash`) files
        "sh": "shellcheck"
    },
    "diagnostic-languageserver.formatFiletypes": {
        // format `sh` (includes `bash`) files using formatter defined below
        "sh": "shfmt"
    },
    "diagnostic-languageserver.formatters": {
        // define our formatter so that we can reference it from
        // `diagnostic-languageserver.formatFiletypes`
        "shfmt": {
            "command": "shfmt",
            // all the below args are entirely optional
            // primarily listed here to call out that flags which take an
            // argument (such as `-i <num-spaces>` for specifying indentation)
            // should be split into two strings, the flag and then the value
            "args": [
                "-i",
                "2",
                "-bn",
                "-ci",
                "-sr"
            ]
        }
    },
}
